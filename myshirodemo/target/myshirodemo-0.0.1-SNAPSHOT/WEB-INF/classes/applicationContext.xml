<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"

    xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc 
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
               http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
                http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
       ">
 <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
         <!-- 配置securityManager，需要配置2个属性 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
   		<!--1.配置cacheManager 需要配置ehcache的pom依赖、配置文件-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>
	<!-- 2.配置Realm,需要自己写一个类，来实现Realm这个接口-->
	<!-- 实现了org.apache.shiro.realm.Realm接口的bean-->
	<!-- md5加密：替换当前realm的credentialsMatcher属性，直接使用HashedCredentialsMatcher对象。 -->
    <bean id="jdbcRealm" class="com.changping.shiro.realm.MyShiroRealm">
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"></property>
    			<property name="hashIterations" value="5000"></property>
    		</bean>
    	</property>
    </bean>
    
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
     <!--3.配置LifecycleBeanPostProcessor可以自动的调用配置在Spring Ioc容器中shiro bean的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
     <!--4.启用Ioc容器中使用shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才能使用。 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--5.配置ShiroFilter,
	id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致。
	anon允许匿名访问，
	authc必须被认证之后才能访问即登陆之后才能访问的页面。
	 -->
    <bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro_login = anon
                /add_user.jsp = anon
                /add_user =anon
                
                /shiro_logout = logout
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
    <context:component-scan base-package="com.changping.shiro.service"></context:component-scan>
   <context:property-placeholder location="classpath:dbConfig.properties" />
   <!-- mysql配置session -->
   <bean id="dataSource_mysql" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${mysql.driverClassName}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.jdbc.username}" />
		<property name="password" value="${mysql.jdbc.password}" />
	</bean>
	<bean id="sqlSessionFactory_mysql" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_mysql" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.changping.shiro.dao.mysqldao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_mysql" />
	</bean>	
	
	<!-- oracle配置session-->
	<bean id="sqlSessionFactory_oracle" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_oracle" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
   <bean id="dataSource_oracle" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${oracle.driverClassName}" />
		<property name="url" value="${oracle.url}" />
		<property name="username" value="${oracle.jdbc.username}" />
		<property name="password" value="${oracle.jdbc.password}" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.changping.shiro.dao.oracledao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_oracle" />
	</bean>		

</beans>

